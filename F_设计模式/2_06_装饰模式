装饰模式：
	最常见例子：IO包中的类
	目的：不改变接口，但加入责任。

	优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。

	使用场景：
    ● 需要扩展一个类的功能，或给一个类增加附加功能。
    ● 需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
    ● 需要为一批的兄弟类进行改装或加装功能，首选装饰模式。
	
	举例：
		被装饰者：含有基本基础功能的类，实现父类（抽象类）的抽象方法
		装饰者：与被装饰者有共同的父类（抽象类），包含父类类型的成员变量（构造时初始化为被装饰者）。
			实现父类的抽象方法，方法内调用被装饰者的方法并添加自己的装饰处理。
		