1/
	JAVA8开始，可以为接口方法提供一个默认实现。 必须用 default 修饰符标记这样一个方法。
	因此一些伴随类已经过时，而为接口新增方法也变为可行，只要提供默认实现即可。

2/
	如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法:
	--超类优先。如果超类提供了一个具体方法，同名而且有相同参数类型的默认方法会被忽略。
	--接口冲突。 如果一个超接口提供了一个默认方法，另一个接口提供了一个同名而且参数类型 （不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。【编译会报错】
	
3/
	浅拷贝和深拷贝
		Object类中的clone方法是浅拷贝，基本数据类型被克隆，而引用数据类型没有克隆，直接引用原对象。
		如果引用数据类型是不可变类，如String，则安全，否则不安全。
		深拷贝需要手工处理
		建议需要克隆的类都实现标记接口Cloneable

4/	
	lambda表达式
		格式为(参数类型及形参，可有多个) -> {方法块}
			参数类型可省略
			只有一个形参且省略了参数类型时，()也可省略
		
		函数式接口--对于只有一个抽象方法的接口，需要该接口的对象时，就可以使用lambda表达式
		方法引用--lambda表达式的格式简化(this和super也可算是object)
			object :: instanceMethod	如 x->System.out.println(x)可写成System.out::println
			Class ::　staticMethod		如(x,y)->Math.pow(x,y)可写成Math::pow
			Class　:: instanceMethod		如(x,y)->x.compareToIgnoreCase(y)可写成String::compareToIgnoreCase
		构造器引用--lambda表达式的格式简化
			Class :: new	如x->new int[x]可写为int[]::new
		变量作用域
			lambda表达式可引用（捕获）实际上的最终变量，即变量初始化后就不赋新值了

5/
	内部类
		内部类维护一个隐式引用outer，可以访问外部类对象
		
6/
	代理
		运行时创建一个实现一组给定接口的类
		使用场景：编译时无法确定需要实现哪些接口
		基于接口的动态代理：
			/SimpleGOD/src/top/tiral/reflect/ProxyDemo.java
			焦点在于：1、处理器；2、代理对象
		代理类一定是 public 和 final。 如果代理类实现的所有接口都是 public， 代理类就不属于某个特定的包；否则， 所有非公有的接口都必须属于同一个包，同时，代理类也属于这个包。
		