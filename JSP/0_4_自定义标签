自定义标签
	类似自定义EL表达式
	
	步骤：
		1.写一个直接或间接实现Tag接口的类.（可以继承Tag的默认适配器类TagSupport）
			Tag接口：javax.servlet.jsp.tagext.Tag
			常量：
				SKIP_BODY:忽略标签的主体内容。只为doStartTag方法服务
				EVAL_BODY_INCLUDE:不忽略标签的主体内容。只为doStartTag方法服务
				SKIP_PAGE:忽略结束标签之后的内容。只为doEndTag方法服务
				EVAL_PAGE:不忽略结束标签之后的内容。只为doEndTag方法服务
			方法：
				int doStartTag():容器调用。遇到自定义标签的开始标签时被调用。
				int doEndTag():容器调用。遇到自定义标签的结束时被调用。
				void setPageContext(PageContext pc):由容器调用。处理标签之前就会调用。
				void setParent(Tag t):由容器调用。处理标签之前就会调用。目标传递进父标签，没有传递null。
				void release() :由容器调用，释放标签类占用的资源。
			
			IterationTag：
			常量：
				EVAL_BOFY_AGAIN：再次执行doAfterBody方法。只为doAfterBody方法服务
			方法：
				int doAfterBody():执行完主体后容器执行该方法，只能返回Tag.SKIP_BODY或IterationTag.EVAL_BOFY_AGAIN
				
			BodyTag：
			常量：
				EVAL_BOFY_BUFFERED：让容器调用doInitBody和setBodyContent，为doStartTag方法服务
			方法：
				int doInitBody():初始化主体，容器调用，当doStartTag方法返回BodyTag.EVAL_BOFY_BUFFERED时容器默认调用
				void setBodyContent():设置主题内容，容器调用，当doStartTag方法返回BodyTag.EVAL_BOFY_BUFFERED时容器默认调用
				
		2.编写tld文件，文件中对标签处理器类进行描述。并在web.xml中配置此tld文件
	
	示例：
		/SimpleGOD/src/top/trial/servlet/jsp/tag/ShowRemoteIpTag.java
		/SimpleGOD/WebContent/JSP/trial/selfTag.jsp
		/SimpleGOD/WebContent/WEB-INF/tld/selfTag.tld
		
		/SimpleGOD/src/top/trial/servlet/jsp/tag/ShowRemoteIpSimpleTag
		/SimpleGOD/WebContent/WEB-INF/tld/selfSimpleTag.tld
		
	附属功能(普通版)：
		1、控制JSP页面某一部分内容是否执行，使用doStartTag()方法返回SKIP_BODY常量
		2、控制结束标签后的JSP内容是否执行，使用doEndTag()方法返回SKIP_PAGE常量
		3、控制JSP页面某一部分内容重复执行，使用doAfterBody()方法返回IterationTag.EVAL_BOFY_AGAIN常量，自己算返回次数
		4、修改JSP页面某一部分内容，然后输出，需要继承BodyTagSupport，使用doStartTag()方法返回BodyTag.EVAL_BOFY_BUFFERED常量，然后在doEndTag里操作bodyContent参数
	附属功能(简单版)【依赖JspTag接口的子接口simpleTag及其实现类SimpleTagSupport,每次调用都初始化】：
		1、控制JSP页面某一部分内容是否执行，使用doTag()方法，方法体空置
		2、控制结束标签后的JSP内容是否执行，使用doTag()方法，抛出SkipPageException异常即可
		3、控制JSP页面某一部分内容重复执行，使用doTag()方法，直接设置属性接收次数后，for循环即可。getJspBody().invoke(null)即是展示主体内容。
		4、修改JSP页面某一部分内容，然后输出，使用doTag()方法，getJspBody().invoke(new StringWriter())
	
	标签的配置元素详解
		tld文件：
		taglib：根元素
			tlib-version:版本号
			short-name:引用标签时的短名称。一般与tld文件的文件名一致，好找。
			uri：标签绑定的名称空间。只是一个名字，没有实际的意义。
			tag：定义标签元素
				name：标签的名称。
				tag-class:标签的实现类的全名称。
				body-content:指示标签的主体内容的类型。
					可选值：
						empty:没有主体内容。适用于传统和简单标签。
						JSP:说明JSP文件中能出现啥，标签主体内容中就能出现啥。适用于传统标签。
						scriptless：说明标签的主体内容不能是java脚本。适用于简单标签。
						tagdependent：说明标签的主体内容是原封不动的传递给标签处理类的。
									而不是传递的运算结果
				attribute：定义标签的属性
					name：属性名。对应标签处理类中的setter方法
					required:是否是必须的属性
					rtexprvalue：是否支持表达式（EL或java表达式）。默认是false。