Session
	服务器端技术
	
	服务器为每个用户浏览器创建一个会话对象（session对象）,浏览器关闭就没了，因为sessionID存在cookie中，若想解决，自己写cookie的生命周期。
		另，session在服务器默认存在半小时，可配置
			配置session超时时间web.xml
			<session-config>
				<session-timeout>1</session-timeout>单位为分钟
			</session-config>
			也可以调用session的invalidate()方法主动销毁
		默认情况下，一个浏览器独占一个session对象
	session对象由服务器创建，可通过request对象的getSession方法获得，该方法先查询内存是否有该客户的session，没有则创建新的。
	所以，创建session的时机是第一次调用getSession方法时
	
	应用：
		购物车--加入购物车set，查看购物车get
		一次性验证码CAPTCHA--生成验证码set，提交get并比较
		防止表单重复提交--生成令牌放到session中，同时放一份到输出的页面的表单隐藏input上。用户提交时对比，并销毁session中的令牌。
	
	客户端禁用cookie
		localhost的地址没关系，禁用对其无效
		127.0.0.1的地址会被禁用
		解决
			小网站，进行URL重写，在连接URL后面直接加上sessionID。因为需要所有的URL都重写，因此只适合少量页面的项目。
			方法：
				HttpServletResponse.encodeURL(url);此方法能判断cookie是否禁用来判断是否重写
	
	session持久化：要求放入session中的对象的类要实现Serializable接口
		当前管理的session对象太多
		某session对象长时间没有用
		服务器或应用开始重启或重新加载
	session激活：
		session对象又使用了
		服务器重启或重新加载完毕
	
	Session示例：
		/SimpleGOD/src/top/trial/servlet/SessionGetDemoServlet.java
		/SimpleGOD/src/top/trial/servlet/SessionSetDemoServlet.java