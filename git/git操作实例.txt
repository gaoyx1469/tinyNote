git操作实例

一、github准备：
	1：	github注册，上传头像
	2：	本地生成SSH
			查看是否拥有密钥
			$ cd ~/.ssh
			$ ls
			寻找一对以 id_dsa 或 id_rsa 命名的文件，其中一个带有 .pub 扩展名。
			.pub 文件是公钥，另一个则是私钥
		
			创建SSH密钥
			$ ssh-keygen
		
	3：	github增加SSH公钥
		将id_rsa.pub公钥文件内容填入文本区
	
	4：	github新建项目
	
二、本地操作：
	1：	本地代码目录运行git init,生成本地仓库
	
	2：	git add .	添加本地文件到暂存区
	
	3：	git commit -m “提交信息”	提交本地文件
	
	4：	git remote add origin [url]	本地仓库添加远程连接
		如git remote add origin https://github.com/gaoyx1469/tinyNote.git
		
		origin：[remote-name]远程连接名
		[url]:远程仓库url
		
	4.1:	操作过程中url敲错了，
		git remote -v	查看远程连接
		
	4.2：	删除该远程连接
		git remote rm [remote-name]
		
		[remote-name]：就是上面的origin
	
	
	5：	git push -u origin master	将本地仓库代码推送至远程仓库
	
		origin:[remote-name]
		master:[branch]分支名
		-u:
		
		另：git push [remote-name] [branchname]：[remote-branchname]推送到远程仓库指定分支
		
		另：后来直接git push直接搞定
		
	6：	git commit --amend	此次提交将与上次提交合并，进入VIM编辑修改提交备注信息
		
三、附加操作：
	1：	查看配置
		git config --list
		
	2：	查看仓库状态
		git status			详细信息，带提示
		
		git status -s		单行信息
		git status --short	同上
		？？表示未跟踪	左M已修改已暂存未提交	右M已修改未暂存		A新添加到暂存区
		
	3：	更改文件名
		git mv file_from file_to	路径问题需要注意
		
		等同于：
			mv file_from file_to
			git rm file_from 
			git add file_to
		
	4：	查看提交日志
		git log提交日志
			-p		详细比较版本差异
			-数量	显示最近几个版本
			--stat	简单显示版本差异
			--pretty=oneline	可选参数(oneline,short,full,fuller)，越来越详细
			--pretty=format:"%h - %an, %ar : %s"	
				可选参数：
				%H 提交对象（commit）的完整哈希字串
				%h 提交对象的简短哈希字串
				%T 树对象（tree）的完整哈希字串
				%t 树对象的简短哈希字串
				%P 父对象（parent）的完整哈希字串
				%p 父对象的简短哈希字串
				%an 作者（author）的名字
				%ae 作者的电子邮件地址
				%ad 作者修订日期（可以用 --date= 选项定制格式）
				%ar 作者修订日期，按多久以前的方式显示
				%cn 提交者（committer）的名字
				%ce 提交者的电子邮件地址
				%cd 提交日期
				%cr 提交日期，按多久以前的方式显示
				%s 提交说明
			--graph 添加了一些ASCII字符串来形象地展示分支、合并历史
			
		
		git reflog	包含回退和amend的日志
		git reflog show [branchname]	仅查看某分支的日志
		
	5：	删除某文件
		$ git rm xxx.xxx	(不可以是未追踪的文件，不可以是修改未暂存文件)
		
		$ git rm -f xxx.xxx	(暂存区有的话，需要强制删除；已修改的话，也需要强制删除)
		
		$ git rm --cached xxx.xxx(从暂存区删除，本地保留，变为未追踪文件)

	6：	差异查看
	
		当前与暂存区（已add的版本）对比：
		$ git diff
		当前与最新版本库（已commit的版本）对比：
		$ git diff HEAD
		暂存区与最新版本库对比：
		$ git diff --cached
		$ git diff --staged
		
		后面可加 --[文件名]
		
	7：	回退
	
		撤销add但未commit的修改，让暂存区的而修改回退到工作区
		$ git reset HEAD xxx.txt		
		$ git reset xxx.txt
		
四、本地分支操作：

	
五、分布式操作：
	1：	第二电脑克隆代码
		$ git clone [url] 自定义本地仓库名	
		克隆url到当前目录下新建本地仓库名目录内，自定义本地仓库名不指定，则与远程库同名。
		
	2：	从远程仓库抓取，移动本地origin/master指针（远程引用）到与远程仓库一致的位置
		git fetch [remote-name]
	
		git pull  约等于   git fetch 加上 git merge
		
	3：	删除远程引用，仅移除指针
		git push [remote-name] --delete [branchname]
		
	4：	远程仓库改名
	git remote rename oldName newName
		
七、其它操作：
	1：	增加命令别名
		$ git config --global alias.别名 原命令