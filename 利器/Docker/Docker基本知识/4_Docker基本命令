## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version 返回docker的版本
docker version
docker info	返回所有容器和镜像的数量，docker使用的执行驱动和存储驱动，docker的基本配置

## List Docker images
docker image ls
docker images -a

## Execute Docker image
docker run hello-world	run命令提供了Docker容器的创建到启动的功能
docker run --name xxx_xxx_xxx -i -t ubuntu /bin/bash	
	【--name：为容器起别名|--restart=xxx：always为总是自动重启；on-failure:N，退出代码不是0时重启，最多重启N次】
	【-d：将容器以分离的方式放到后台运行，即创建守护式容器|-p xx:xx：运行时公开哪些端口，冒号前为宿主机端口省略则自动分配，冒号后为容器端口】
	【-i：保证STDIN开启|-t：为容器分配伪tty终端|ubuntu：基于ubuntu镜像创建容器，后面可以用：分隔追加镜像版本号|/bin/bash：告诉容器执行此命令】

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq
docker ps -a	【等同于docker container ls --all】
	【-a：列出所有容器|-l：最后一个运行的容器，无论此时运行还是停止|-n X：列出最后的X个容器】

## Remove Docker container
docker rm xxx_xxx_xxx
docker rm 'docker ps -a -q'

##Stop Docker container
docker stop xxx_xxx_xxx

## Restart Docker container
docker restart xxx_xxx_xxx
docker start xxx_xxx_xxx
docker attach xxx_xxx_xx

## Create Docker container 创建而不运行
docker create

## Show container logs
docker logs -f xxx_xxx_xxx	【-f：监控日志，可省略，就只会输出当前最后几条日志，ctr+c退出监控|-ft：监控日志并加时间戳】

查看容器统计信息
docker stats xxx_xxx_xxx	【后面可附加多个容器名】

在容器内部额外运行进程
docker exec -d xxx_xxx_xxx 命令	【运行后台进程】
docker exec -t -i xxx_xxx_xxx 命令 【运行前台交互进程】

获取更多容器信息
docker inspect xxx_xxx_xxx
docker inspect --format='{{ .State.Running }}' xxx_xxx_xxx  【--format:选择输出信息】

拉取镜像
docker pull
如：docker pull ubuntu:12.04	【12.04是镜像的标签，区分不同的版本】

## Remove Docker image
docker rmi 用户名/仓库名:标签	【空格隔开可删除多个】	
docker rmi 'docker images -a -q'

使用commit命令创建镜像
docker commit -m"xxxxxxx" -a"xxxx" 容器ID 用户名/仓库名:标签	【-m：提交信息，可省略|-a：作者信息，可省略|标签名也可省略，默认latest】

使用build命令创建镜像
进入Dockerfile所在目录
docker build --no-cache -t="用户名/仓库名:标签" .	【--no-cache：不使用缓存，可省略】

查看镜像构建历史
docker history imageID

查看Docker端口映射情况
docker port 容器ID或容器名 容器端口号

将镜像推送到Docker Hub
docker push 用户名/仓库名:标签
