演化历程
	一/初级阶段网站架构
		应用程序/数据库/文件等都放在一台服务器上。
	二/应用服务和数据服务分离
		应用服务器		要求CPU性能
		数据库服务器	要求磁盘和内存性能
		文件服务器		要求硬盘空间
	三/使用缓存改善性能
		应用服务器本地缓存			访问更快，受服务器内存限制，数据量小，与应用争内存
		分布式缓存服务器远程缓存	要求内存空间
	四/使用应用服务器集群
		单一应用服务器能处理的请求连接有限，易成为瓶颈
		负载均衡调度服务器，分发请求到应用服务器
	五/数据库读写分离
		数据库主从热备功能，配置两台数据库主从关系，可以将一台数据库服务器的数据更新同步到另一台服务器上。实现数据库读写分离。
		应用服务器在写数据的时候，访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库，这样当应用服务器读数据的时候，就可以通过从数据库获得数据。
		为了便于应用程序访问读写分离后的数据库，通常在应用服务器端使用专门的数据访问模块，使数据库读写分离对应用透明。
	六/使用反向代理和CDN加速网站响应
		CDN 和反向代理的基本原理都是缓存。使用 CDN 和反向代理的目的都是尽早返回数据给用户，一方面加快用户访问速度，另一方面也减轻后端服务器的负载压力。
		CDN 部署在网络提供商的机房，使用户在请求网站服务时，可以从距离自己最近的网络提供商机房获取数据。
		反向代理则部署在网站的中心机房，当用户请求到达中心机房后，首先访问的服务器是反向代理服务器，如果反向代理服务器中缓存着用户请求的资源，就将其直接返回给用户。
	七/使用分布式文件系统和分布式数据库
		分布式数据库是网站数据库拆分的最后手段，只有在单表数据规模非常庞大的时候才使用。
		不到不得已时，网站更常用的数据库拆分手段是业务分库，将不同业务的数据部署在不同的物理服务器上。
	八/使用Nosql和搜索引擎
		随着网站业务越来越复杂，对数据存储和检索的需求也越来越复杂，网站需要采用一些非关系数据库技术如 NoSQL 和非数据库查询技术如搜索引擎。
	九/业务拆分
		根据产品线划分，将一个网站拆分成许多不同的应用，每个应用独立部署。应用之间可以通过一个超链接建立关系（在首页上的导航链接每个都指向不同的应用地址），也可以通过消息队列进行数据分发，当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统。
	十/分布式服务
		可以将共用的业务提取出来，独立部署。由这些可复用的业务连接数据库，提供共用业务服务，而应用系统只需要管理用户界面，通过分布式服务调用共用业务服务完成具体业务操作。