Spring注解annotation
	环境准备
		在IoC基础上，需要aop的jar包/maven工程可忽略
		配置文件需要导入基于注解的context的名称空间以及组件需要扫描的包
			示例：springAnnotation.xml
		使用注解配置对象
			示例：
			--半注解半XML形式
			    AnnotationDao.java
                AnnotationService.java
			    AnnotationDaoImpl.java
				AnnotationServiceImpl.java
				SpringAnnotationBeanTest.java
		    --纯注解形式
                AnnotationDao.java
                AnnotationService.java
                AllAnnotationDaoImpl
                AllAnnotationServiceImpl
                SpringAllAnnotationTest
	注解分类
		创建对象
			@Component		相当于bean标签 
				value:指定bean的id，不写默认当前类名且首字母小写
			下面三个注解与Component作用一致，仅语义化有区别
			@Controller		用于表现层
			@Service		用于业务层
			@Repository		用于持久层
		注入数据
			注入其它bean类型
				@Autowired		自动按照类型匹配注入，只要容器中有唯一可匹配类型，则能注入成功；使用此注解不需要set方法
					属性required：值为true时注入失败会报错，值为false时注入失败不会报错，默认true
					自动注入有多个匹配的情况时，再看有没有能和变量名完全匹配的bean的id，有则能注入成功，否则报错
				@Qualifier		在自动按照类型注入的基础之上，再按照bean的id注入，给类的成员注入时，不能独立使用，需要在Autowired下使用
								【也可以在使用配置类进行配置时，可在方法的参数类型前加上此注解，指定bean的id进行精确注入，此时可以独立使用】
					属性value指定bean的id	
				@Resource		直接按照bean的id注入
				                【java新版本JDK不再包含此注解，需要导包】
					属性name指定bean的id
			注入基本类型和String
				@Value			
					属性value	指定要注入的数据		支持spring的el表达式SpEL：${表达式},表达式是关联的properties文件中的key
					properties关联方式<context:property-placeholder location="properties文件classpath路径"/>
		改变作用范围
			@Scope	改变bean的作用范围，与xml中配置方式相同
				属性value
		影响生命周期（不重要）
			@PostConstruct	指定初始化方法
			@PreDestroy		指定销毁方法
		
		新注解【全注解模式:创建容器、扫描包、数据源等】
			@Configuration	表明当前类是spring配置类，即建一个类取代xml，并加上该注解.
							【如果仅作为AnnotationConfigApplicationContext的参数，可不加此注解】
			@Bean			写在方法上，把当前方法的返回值作为bean对象，存入spring容器之中
				属性name指定bean的id，没有则默认值是当前方法名
				如果当前方法有参数，去容器中找匹配的参数类型，如果找到唯一匹配，则注入；如果没有匹配，则报错；如果匹配多个，需要@Qualifier注解，此时其可单独使用
			@ComponentScan	取代context:component-scan标签，value直接作为注解参数；扫描的包里含有带@Configuration标签的类，会作为spring配置类的从类
				【如何创建容器？--->使用AnnotationConfigApplicationContext取代ClassPathXmlApplicationContext，参数填写spring配置类.class】
			@Import			在主配置类上导入从配置类，value属性填入类的字节码，此时从配置类不需要@Configuration
			@propertySource	指定properties文件位置，用以取代<context:property-placeholder location="properties文件classpath路径"/>标签
							值的例子："classpath:路径"或者"路径"
							这样就可以使用@Value(${表达式})注入数据了
		
		AOP注解：
			@EnableAspectJAutoProxy
				替代<!-- 告知spring容器采用注解方式进行AOP --><aop:aspectj-autoproxy />
			@Aspect 
				将当前类配制成一个切面
			@Pointcut("切入点表达式")
				将当前方法配置成切入点
			@Before("切入点表达式或切入点方法【切入点方法需要带括号】")
				前置通知
			@AfterReturning("切入点表达式或切入点方法【切入点方法需要带括号】")
				后置通知
			@AfterThrowing("切入点表达式或切入点方法【切入点方法需要带括号】")
				异常通知
			@After("切入点表达式或切入点方法【切入点方法需要带括号】")
				最终通知
			@Around("切入点表达式或切入点方法【切入点方法需要带括号】")
				环绕通知
		
		TX事务注解：
			@Transactional
				出现在接口上，则接口所有实现类方法都有事务
				出现在类上，则类中所有方法有事务
				出现在方法上，则该方法有事务
				属性就近原则
			@EnableTransactionManagement
				使用该注解替代tx:annotation-driven
				需要放在@Configuration下
			