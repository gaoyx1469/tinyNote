Spring注解annotation
	环境准备
		在IoC基础上，需要aop的jar包
		配置文件需要导入基于注解的context的名称空间以及组件需要扫描的包
			示例：/SimpleGOD/src/springAnnotation.xml
		使用注解配置对象
			示例：/SimpleGOD/src/top/trial/spring/dao/impl/AnnotationDaoImpl.java
				/SimpleGOD/src/top/trial/spring/service/impl/AnnotationServiceImpl.java
	注解分类
		创建对象
			@Component		相当于bean标签 
				value:指定bean的id，不写默认当前类名且首字母小写
			下面三个注解与Component作用一致，仅语义化有区别
			@Controller		用于表现层
			@Service		用于业务层
			@Repository		用于持久层
		注入数据
			注入其它bean类型
				@Autowired		自动按照类型匹配注入，只要容器中有唯一可匹配类型，则能注入成功；使用此注解不需要set方法
					属性required：值为true时注入失败会报错，值为false时注入失败不会报错，默认true
					自动注入有多个匹配的情况时，再看有没有能和变量名完全匹配的bean的id，有则能注入成功，否则报错
				@Qualifier		在自动按照类型注入的基础之上，再按照bean的id注入，给类的成员注入时，不能独立使用，需要在Autowired下使用
								也可以在使用配置类进行配置时，可在方法的参数类型前加上此注解，指定bean的id进行精确注入
					属性value指定bean的id	
				@Resource		直接按照bean的id注入
					属性name指定bean的id
			注入基本类型和String
				@Value			
					属性value	指定要注入的数据		支持spring的el表达式：${表达式},表达式是关联的properties文件中的key
					properties关联方式<context:property-placeholder location="properties文件classpath路径"/>
		改变作用范围
			@Scope	改变bean的作用范围，与xml中配置方式相同
				属性value
		影响生命周期（不重要）
			@PostContruct	指定初始化方法
			@PreDestory		指定销毁方法
		
		新注解【全注解模式:创建容器、扫描包、数据源等】
			@Configuration	表明当前类是spring配置类，即建一个类取代xml，并加上该注解.如果仅作为AnnotationConfigApplicationContext的参数，可不加此注解
			@Bean			写在方法上，把当前方法的返回值作为bean对象，存入spring容器之中
				属性name指定bean的id，没有则默认值是当前方法名
				如果当前方法有参数，去容器中找匹配的参数类型，如果找到唯一匹配，则注入；如果没有匹配，则报错；如果匹配多个，需要@Qualifier注解，此时其可单独使用
			@ComponentScan	取代context:component-scan标签，value直接作为注解参数；扫描的包里含有带@Configuration标签的类，会作为spring配置类的从类
			使用AnnotationConfigApplicationContext取代ClassPathXmlApplicationContext，参数填写spring配置类.class
			@Import			在主配置类上导入从配置类，value属性填入类的字节码，此时从配置类不需要@Configuration
			@propertySource	指定properties文件位置，用以取代<context:property-placeholder location="properties文件classpath路径"/>标签
							值的例子："classpath:路径"或者"路径"
			