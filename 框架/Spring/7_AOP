概念：
	面向切面编程，通过预编译和运行时动态代理实现程序功能。
	运行时，使用动态代理对象，在不修改源码的情况下实现功能的增强；抽取重复代码，减少编码量；提高开发效率，便于维护。
	名词解释：
		连接点Joinpoint：被拦截到的点【方法】
		切入点Pointcut：对哪些连接点进行拦截的定义
		通知Advice：拦截到连接点后要做的事情，通知分为前置通知、后置通知、异常通知、最终通知、环绕通知
		引介Introduction：不修改代码的情况下，运行器动态地为类增加方法或属性
		代理对象Target：代理的目标对象
		织入Weaving：把增强应用到目标对象来创建代理对象的过程
		切面Aspect：切入点和通知的结合【通知和切入点的关系】
解决了什么问题：解决事务间耦合
如何实现：
	配置
		环境搭建
			spring的aspects包
			aopalliance.jar
			aspectjweaver.jar
			ioc及注解对应的5个包beans、context、core、expression、aop
			commons-logging包

			对于maven工程，在ioc基础上新增以下依赖
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>1.9.5</version>
            </dependency>
		配置步骤
			有XML版
				参考bean_aop.xml【命名空间包含xsi和aop】
		
切入点表达式：
	关键字execution(表达式)
	表达式写法：访问修饰符 返回值 包名.包名....类名.方法名(参数列表)
	访问修饰符：可省略
		execution(void top.trial.spring.service.impl.AccountOperationAopServiceImpl.saveAccount())
	返回值：可使用*表示任意返回
		execution(* top.trial.spring.service.impl.AccountOperationAopServiceImpl.saveAccount())
	包名：可使用*表示任意包；使用..表示当前包及其子包
		execution(* top.trial.*.*.*.AccountOperationAopServiceImpl.saveAccount())
		execution(* top.trial..AccountOperationAopServiceImpl.saveAccount())
		execution(* *..AccountOperationAopServiceImpl.saveAccount())
	类名：可使用*表示任意类
		execution(* *..*.saveAccount())任意包任意类下的无参saveAccount方法
	方法名：可使用*表示任意方法
		execution(* *..*.*())任意包任意类下的无参方法
	参数列表：可指定任意类型
		基本类型直接写类型名称
			execution(* *..*.*(int))任意包任意类下的参数为int的方法
		引用类型写全类名
			execution(* *..*.*(java.long.String))任意包任意类下的参数为String的方法
		可使用*表示任意参数，但是必须有参数
			execution(* *..*.*(*))任意包任意类下的有参的方法
		可使用..表示任意参数，有无参数皆可
			execution(* *..*.*(..))任意包任意类下的任意方法
				


未使用AOP时事务处理：
	SpringAccountOperationWithoutAopTest
		serviceWithTransaction：无事务版本
		serviceWithoutTransaction：增加事务版本
		serviceWithProxy：使用动态代理事务版本
使用AOP时事务处理：
	SpringAccountOperationAopTest	使用两个不同的XML，分别对应XML形式的AOP和注解形式的AOP
