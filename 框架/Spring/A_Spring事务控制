Spring事务控制
	在IoC基础上，需要额外的jar包有：
		spring的tx--事务相关
		spring的jdbc--JdbcTemplate相关【依赖core】

		maven依赖是
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>5.2.7.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>5.2.7.RELEASE</version>
            </dependency>
		
	使用以下方法实现Connection的线程绑定（不同线程的Connection是不一样的）
	TransactionSynchronizationManager.initSynchronization();
	
PlatformTransactionManager
	常用实现类
	    DataSourceTransactionManager【对应jdbc、mybatis】
	    HibernateTransactionManager【对应hibernate】
	提供commit和rollback方法定义
TransactionDefinition
	常用实现类DefaultTransactionDefinition
	提供事务相关设置
		setReadOnly(Boolean);   默认false，查询时建议为true
		setTimeout(int);        单位秒，默认-1，即不限制
		setPropagationBehavior(int);    设置事物传播行为
			REQUIRED	数据库增删改时建议此项，必须有事务
			SUPPORTS	查询时建议此项，支持当前事务，当前有事务，则使用事务。
		setIsolationLevel(int);设置事务隔离级别
		    ISOLATION_DEFAULT             数据库默认级别，是下面四个中某一种
		    ISOLATION_READ_UNCOMMITTED    可读取未提交数据
		    ISOLATION_READ_COMMITTED      只能读已提交数据，Oracle默认此级别
		    ISOLATION_REPEATABLE_READ     读取其它事务提交修改后的数据，Mysql默认此级别
		    ISOLATION_SERIALIZABLE        读取其它事务提交添加后的数据
TransactionStatue
	提供事务状态信息
	    flush()     刷新事务
	    hasSavepoint()  是否存在存储点
	    isCompleted()   事务是否完成
	    isNewTransaction()  事务是否是新事务
	    isRollbackOnly()    事务是否回滚
	    setRollbackOnly()   设置事务回滚

一：	
	service层需要的操作【初始版】
		1/获取数据源--service实现类属性注入
		2/实现Connection的线程绑定--TransactionSynchronizationManager.initSynchronization();
		3/获取Connection对象--DataSourceUtils.getConnection(dataSource);
		4/设置Connection手动提交--connection.setAutoCommit(false);
		5/提交事务--connection.commit();
		6/异常回滚--connection.rollback();
		7/finally释放资源
	
	以上可采用AOP将公共部分提取出来

二：	
	service层需要的操作【Spring事务版】
		1/获取PlatformTransactionManager--service实现类属性注入DataSourceTransactionManager
		2/获取DefaultTransactionDefinition--new DefaultTransactionDefinition
		3/设置定义信息--setTimeout、setReadOnly、setPropagationBehavior
		4/获取事物状态--PlatformTransactionManager.getTransaction(DefaultTransactionDefinition)
		5/提交事务--PlatformTransactionManager.commit(DefaultTransactionDefinition)
		6/异常回滚--PlatformTransactionManager.rollback(DefaultTransactionDefinition)

三：
	service层需要的操作【Spring使用事务控制模板TransactionTemplate】
		1/获取TransactionTemplate--service实现类属性注入TransactionTemplate
		2/在service的业务逻辑方法中使用TransactionTemplate的execute方法--方法参数是TransactionCallback的匿名内部类，
			原业务逻辑流程放到匿名内部类的重写方法中

四：
	基于XML的声明式事务控制
		1/在aop名称空间基础上增加tx名称空间
		2/配置DataSourceTransactionManager的Bean，注入数据源
		3/使用tx:advice配置事务通知,id属性自定，transaction-manager属性注入DataSourceTransactionManager
			tx:advice下可以使用tx:attributes配置事务的属性
			如tx:attributes下使用tx:method name属性填*或者query* 可以过滤使用该属性的方法
				属性isolation配置隔离级别,默认DEFAULT，数据库隔离级别
				属性read-only配置只读,默认false
				属性timeout配置超时时间，默认-1
				属性propagation配置事务传播行为，默认REQUIRED,查询时可用SUPPORTS
				属性rollback-for用于指定一个异常，产生该异常就回滚，其它不回滚。不配置则所有异常回滚
				属性no-rollback-for用于指定一个异常，产生该异常就不回滚，其它回滚。不配置则所有异常回滚
		4/配置切面aop:config中的切入点表达式aop:pointcut
		5/建立切入点表达式和事务间的关系--配置aop:config中的aop:advisor标签，advice-ref属性填tx:advice的id，point-ref属性填aop:pointcut的id

		示例
            AccountOperationTxDaoXmlImpl
            AccountOperationTxServiceXmlImpl
            SpringAccountOperationTxWithXmlTest
            spring_tx.xml
		
五：
	基于注解的声明式事务控制
		半注解时，使用<tx:annotation-driven transaction-manager="transactionManager"/>标签开启对注解事务的支持并引用事物管理器
			在需要事务控制的serviceImpl类上加入@Transactional注解即可，tx:advice和aop:config已省
			也可以在方法上加@Transactional注解
	        示例
	            AccountOperationTxDaoAnnotationImpl
	            AccountOperationTxServiceAnnotationImpl
	            SpringAccountOperationTxWithXmlTest
                spring_tx_annotation.xml

		全注解时，使用@EnableTransactionManagement替代<tx:annotation-driven transaction-manager="transactionManager"/>标签
			
