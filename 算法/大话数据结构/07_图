图
	顶点：图中的数据元素称为顶点，图结构中不允许没有顶点
	边：顶点间的逻辑关系，图结构中允许没有边，边分为有向边（弧）和无向边，由此图也分有向图和无向图
	无向完全图：任意两顶点间都存在边的无向图
	有向完全图：任意两顶点见都存在方向相反的两条弧的有向图
	稀疏图：边或弧少
	稠密图：边或弧多
	网：带权的图通常称为网
	无向图-顶点的度：与顶点连接的边的数量
	有向图-顶点的度：分为入度和出度
	无向图-连通图：任意两点都连通
	无向图-连通分量：极大连通子图
	有向图-强连通图：任意两点都双向连通
	有向图-强联通分量：极大强联通子图
	连通图生成树：一个极小连通子图，包含全部n个顶点以及能够构成一棵树的n-1条边
	
	图的五种存储结构：
		邻接矩阵：一个一维数组存顶点，一个二维数组存边或弧。不适用于稀疏图，空间浪费严重
		邻接表：将数组和链表相结合的存储方式，一维数组存储所有顶点，每个顶点的所有邻接点组成一个单向链表。对于有向图，单向链表仅能表示出顶点的入度或出度的一种
		十字链表：为克服邻接表不能同时表示入度和出度问题，在邻接表基础上，拓展单向链表，增加逆向链表
		邻接多重表：为克服邻接表操作无向图的边时需要删除两个单向链表节点问题，一维数组存储所有顶点，链表不再是单链，而是与边的数量相同的链表元素双链互连。
		边集数组：一个一维数组存顶点，一个一维数组存边数据【包含起点终点和权】
	
	图的遍历：
		深度优先遍历DFS：采用递归，记录结点被访问，并循环判断与其相连结点是否被访问，未被访问则调用自身方法遍历
		广度优先遍历WFS：采用队列，记录当前遍历点有哪些未被访问且不在队列中的相连结点，加入到队列中
		
	最小生成树：当边有权时，连通所有结点的最小代价
		普里姆Prim算法：适合边稠密网的最小生成树，采用邻接矩阵存储结构，立足点是顶点，时间复杂度为n*n，原理时从任意顶点开始，循环找到与已确定顶点相连的未确定顶点中边的权最小的，将该顶点加入已确定顶点
		克鲁斯卡尔Kruscal算法：适合边稀疏网的最小生成树，采用边集数组存储结构，立足点是边。原理时不断选取最小的边，保证不形成环。
		
	最短路径：
		迪杰斯特拉Dijkstra算法：从顶点开始，查找与其距离最小的点，计算距离，该点的最短路径确认，然后循环查找与最新确认路径的点的连接点中未确认的最小的距离，计算距离并与之前计算的距离的比较，确认该点最短路径。
			计算特定顶点到任意终点时：时间复杂度n*n；计算任意顶点到任意终点时：时间复杂度n*n*n。基于邻接矩阵。
		弗洛伊德Floyd算法：计算任意顶点到任意终点的最短路径。初始化邻接矩阵和经过路径矩阵。三层循环遍历，如果两点距离大于两点经过第三点中转的距离，则替换邻接矩阵和路径矩阵。时间复杂度n*n*n。
	
	AOV网：表示工程的有向图，顶点表示活动，弧表示活动先后顺序
	拓扑排序【无环有向图】：从AOV网选择入度为0的顶点输出，并删除该点以及以此顶点为尾的弧，重复此步骤即可。基于邻接表，顶点数据结构中增加入度数据，便于统计。时间复杂度O(n+e)。e表示弧的个数。
		
	AOE网：表示工程的有向图，有向边表示活动，边上的权值表示活动持续时间。一般只有一个源点一个汇点。
	关键路径：表示从源点到汇点的最大长度。基于邻接表，弧链表增加权重。时间复杂度O(n+e)。e表示弧的个数。
	