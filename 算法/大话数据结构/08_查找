查找
	静态查找：仅查找【适合使用线性存储结构，顺序查找或排序后二分查找】
	动态查找：查找，并插入或删除【适合二叉排序树查找】
	
	一、顺序查找：线性查找，从表中第一个记录开始一个一个对比关键字。时间复杂度O(n)。
		可以设置哨兵以替代越界判断
	二、有序表查找-折半查找：二分查找【需要有序且线性表是顺序存储结构，由于维护有序所需工作量大，因此不适应于动态查找】。时间复杂度O(logn)，涉及加法和除法。
	三、有序表查找-插值查找：在二分查找的基础上，依据要查找的值，不从中间二分，而是low+((key-a[low])/(a[high]-a[low]))*(high-low)作为新的二分点，涉及复杂四则运算。
	四、有序表查找-斐波那契查找：在二分法查找的基础上，不从中间二分，而是依据斐波那契数列属性，将其分为F(k-1)和F(k-2)两部分。
	五、无序表查找-线性索引查找：
		索引是把一个关键字与它对应的记录相关联的过程。
		线性索引就是将索引项集合组织为线性结构-索引表【索引表有序】。
			稠密索引：线性索引中将数据集中每个记录对应一个索引项，索引项按照关键字有序排列。数据量巨大时性能大大下降。索引项包括关键字和对应数据的指针。
			分块索引：把数据集的记录分成若干块，并且这些块内无序、块间有序。每一块对应一个索引项以减少索引数量。索引项包括最大关键字，记录个数及块首数据指针。
			倒排索引：使用记录号表存储具有相同次关键字的所有记录的记录号【指针或关键字】
	六、二叉排序树：二叉查找树【既有有序表查找的速度优势，又有无序表增加的速度优势】
		构建二叉树，中序遍历可得到有序序列
		查找时通过递归一层一层查找
		增加时同样一层一层比较，插入合适位置
		删除时，删除叶子结点容易；删除的结点只有左子树或只有右子树，则将子树接到双亲结点即可；删除的结点既有左子树又有右子树，取要删除的结点的前驱或后继来替代要删除的结点，而这个前驱或后继肯定是叶子结点或只有一个子树的结点。
		
	七、平衡二叉树：克服二叉排序树不平衡，使每一个结点的左子树和右子树高度相差不超过1。
		平衡因子BF：左子树深度-右子树深度。平衡二叉树的任一结点的BF只能是-1、0、1。
		最小不平衡子树：平衡因子绝对值大于1的离插入结点最近的结点为根的子树。
		构造平衡二叉树就是构造二叉排序树时，调整最小不平衡子树的过程。
		