单例模式
	确保类的对象在内存中只有一个，该实例必须自动创建并对外提供。
	
	优点：
		内存中只有一个对象，节约系统资源，不再频繁创建和销毁
	缺点：
		没有抽象层，难扩展
		职责过重，违背单一原则
		
	实现思想：
		1：构造方法私有
		2：成员位置自己创建一个对象
		3.通过一个公共方法提供访问

	实现方式：
	    1：饿汉式：
	        分为静态常量和静态代码块初始化两种方式，差别不大。
	        适用于该单例对象必然会被用到的情况
	        示例：
	            top.trial.designPattern.singletonPattern.SingletonPatternHungry
	    2：懒汉式：
	        建议使用double-check方式，保证线程安全，并延迟加载
	        适用于该单例对象有一定可能性被用到的情况
	        示例：
	            top.trial.designPattern.singletonPattern.SingletonPatternLazy
	    3：使用静态内部类：
	        利用到了静态内部类的属性：只有在调用时才加载，且类加载是线程安全的
	        示例：
	            top.trial.designPattern.singletonPattern.SingletonPatternStaticInnerClass

	    4：使用枚举：
	        利用枚举的特性，线程安全且能防止通过反序列化的方式再创建新对象。
	        示例：
	            top.trial.designPattern.singletonPattern.SingletonPatternEnum