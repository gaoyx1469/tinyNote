原型模式：
    定义是：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
    具体实现方式是，类实现Cloneable接口，重写Clone方法

    分为深拷贝和浅拷贝
    浅拷贝是属性值拷贝，对于类中数组和引用数据类型，也是拷贝的地址值，因此指向同一引用。
    深拷贝是基本类型值拷贝，引用数组和引用数据类型会创建新对象。

    分析：
        浅拷贝实现方式：
            直接实现Cloneable接口，重写Object的clone方法，方法中直接调用super.clone即为浅拷贝，注意将方法改为public以便其它包的类调用。
            Object的clone方法使用内存二进制流的拷贝，性能好，但是因此没有调用构造方法，若有特殊操作必须在构造方法中执行，就自己实现拷贝，不用Object的方法。
        深拷贝实现方式：
            方式一：在浅拷贝的基础上，继续添加代码，手工实现类成员变量中数组和引用数据类型的拷贝
            方式二：使用序列化的方式，另写一个方法，通过序列化反序列化得到新对象。


    示例代码：
        浅拷贝：top.trial.designPattern.prototypePattern.ShallowCopy
        深拷贝：top.trial.designPattern.prototypePattern.DeepCopy
            其中clone方法使用方式一，copy方法使用方式二序列化反序列化


