策略模式：
	解耦
	定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户
	
	举例：
		游戏可选多个角色，每个角色可任选一个武器，运行中可调换：
		建立角色抽象类，类中包含类型为武器接口的属性，定义角色使用武器抽象方法，定义setter武器方法；
		建立多个具体角色类，继承角色抽象类，实现具体角色使用武器方法；
		建立武器接口，定义武器使用方法；
		建立多个具体武器类，实现武器接口，实现具体武器使用方法；
		
		
		
	要点：
		将可能变化的部分与不会变化的部分分离
			可能变化的部分设置为超类的实例变量调用
			不会变化的部分在超类中具体实现
		针对接口编程
			超类中的实例变量声明为接口类型而不是具体子类类型。
		引入算法族的概念
		多用组合，少用继承
			组合是将两个类结合起来使用（将算法族封装成类，在运行时动态地改变行为）