多线程
	
	/SimpleGOD/src/top/tiral/thread/ThreadTestDemo.java
	/SimpleGOD/src/top/tiral/thread/ThreadPoolTestDemo.java
	
	基本概念：
		线程：进程中负责程序执行的执行单元。一个进程中至少有一个线程。
			【java程序启动，由JVM创建主线程调用main方法，同时JVM也会创建垃圾回收线程】
		多线程：解决多任务同时执行的需求，合理使用CPU资源。多线程的运行是根据CPU切换完成，如何切换由CPU决定，因此多线程运行具有不确定性。
		线程池：基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执行调度由池管理器来处理。
			当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。
		并行：逻辑上同时发生，某一时间内同时运行多个程序
		并发：物理上同时发生，某一时间点同时运行多个程序
		
		
	线程：
		创建线程的两种方式：
			1.继承Thread类，扩展线程。{继承Thread类，覆盖run()方法；创建线程对象并用start()方法启动线程}
			2.实现 Runnable 接口，创建对象并将其作为Thread类的参数。【同时可以采用匿名类的方式】【Runnable 接口实现类创建一个对象就行，适合多线程共同处理一个资源（对象内成员属性）】
		
		线程调度：
			分时调度模型：
				平均分配
			抢占式调度模型：
				Java使用这种模型，根据线程优先级使用。线程默认优先级是5,最低是1,最高是10
				
		线程控制：
			线程休眠：	sleep方法，入参是休眠时间毫秒值。【线程类静态方法，直接在run方法里通过类名调用即可】
			线程加入：	join方法 ，等待该线程终止，其它线程不能抢。【线程对象调用该方法的线程优先执行，执行完毕后其余线程再抢占优先权】
			线程礼让：	yield方法，暂停该线程的执行，让其它线程先执行。【线程类静态方法，直接在run方法里通过类名调用即可】
			后台线程：	setDaemon方法，启动线程前调用。设置守护线程。运行线程都是守护线程时，JVM退出。【启动线程前由线程对象调用该方法】
			中断线程：	stop方法，杀死线程。已过时
					interrupt方法，中断线程。如在wait/sleep/join等方法执行过程中执行了该方法，上述方法将终止，且抛出异常interruptedException。【常见使用方式是通过线程对象调用该方法】
		
		生命周期：
			新建：创建线程对象
			就绪：线程有执行资格，尚未抢到执行权（新建后调用start方法之后，阻塞时调用notify方法之后，sleep方法时间到了之后，运行中失去执行权之后）
			运行：执行中
			阻塞：没有执行资格，没有执行权（sleep方法或wait方法执行后）
				分三种：同步阻塞（代码被其他线程锁上）、等待阻塞（wait方法）、其他阻塞（sleep方法或其它线程调用join方法）
			死亡：线程对象变成垃圾等待被回收（run方法执行结束，或中断线程）
			
	多线程：
		优点：
			适当的提高程序的执行效率（多个线程同时执行）。
			适当的提高了资源利用率（CPU、内存等）。
		缺点：
			占用一定的内存空间。
			线程越多CPU的调度开销越大。
			程序的复杂度会上升。
			
			
	线程安全问题：
		原因产生：
			多线程场景
			存在共享数据
			存在多条语句操作共享数据
		问题解决：
			synchronized同步加锁
		
		
		synchronized关键字：所有加上 synchronized 的方法和块语句，在多线程访问的时候，同一时刻只能有一个线程能够访问。
		volatile关键字：成员变量修饰符，保证下一个读取操作会在前一个写操作之后发生。
			线程都会直接从内存中读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。
		ThreadLocal变量
		join方法：Thread 类中，让调用该方法的 Thread 完成 run() 方法里面的东西后，再执行 join() 方法后面的代码
		yield方法：将当前运行线程的CPU控制权让出来，但有可能马上被系统的调度机制选中来运行。
		sleep方法：将当前运行线程的CPU控制权让出来，在指定的睡眠时间内一定不会再得到运行机会，直到它的睡眠时间完成。不释放锁
		
		以下由锁对象调用：
		wait：导致线程进入等待状态，直到它被其他线程通过调用此对象的notify()或者notifyAll唤醒，该方法只能在同步方法中调用。释放锁并从wait处继续向下执行
		notify：随机选择一个在该对象上调用wait方法的线程，解除其阻塞状态，该方法只能在同步方法或同步块内部调用。
		notifyAll：解除所有那些在该对象上调用wait方法的线程的阻塞状态，同样该方法只能在同步方法或同步块内部调用
		调用这三个方法中任意一个，当前线程必须是锁的持有者，如果不是会抛出一个 IllegalMonitorStateException 异常。
		
	同步：
		多线程出现数据问题（如多窗口卖票问题）的原因：
			多线程操作共享数据，且多条语句操作该数据，中途可能打断
			 
		同步代码块：
			同步可以解决安全问题的根本，在于synchronized（对象）的那个对象上，如同锁的功能，多线程操作共享数据时需要上一把锁(使用同一个对象)。
			synchronized降低了代码运行效率
		同步普通方法：
			synchronized修饰方法，默认锁对象是this
		同步静态方法：
			synchronized修饰方法，默认锁对象是类的class对象
			
				
	死锁：
		两个或两个以上线程在执行过程中，因争夺资源产生的一种互相等待的现象。
		
		解决：
		
	
TIPS：
	不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。每个线程都拥有单独的栈内存用来存储本地数据	
	
	Thread 类中的 start() 和 run() 方法有什么区别？	
		调用 start() 方法才会启动新线程；
		如果直接调用 Thread 的 run() 方法，它的行为就会和普通的方法一样；
		为了在新的线程中执行代码，必须使用 Thread.start() 方法。
		
	wait() 与 Thread.sleep(long time) 的区别？
		wait() 方法进入等待状态时会释放同步锁，而 sleep() 方法不会释放同步锁。
		
