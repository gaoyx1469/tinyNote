多线程
	
	基本概念：
		线程：进程中负责程序执行的执行单元。一个进程中至少有一个线程。
		多线程：解决多任务同时执行的需求，合理使用CPU资源。多线程的运行是根据CPU切换完成，如何切换由CPU决定，因此多线程运行具有不确定性。
		线程池：基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执行调度由池管理器来处理。
			当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。
		
		
	线程：
		创建线程的两种方式：
			1.继承Thread类，扩展线程。{继承Thread类，覆盖run()方法；创建线程对象并用start()方法启动线程}
			2.实现 Runnable 接口，可以在 Thread 中使用。
			
		JDK1.5新增Callable 接口，方法call，任务执行后可返回值，也可以抛出异常。
			运行 Callable 任务可以拿到一个 Future 对象，表示异步计算的结果。
			它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。
			通过 Future 对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。
			可以在 ExecutorService 中使用。
			
		Future接口，方法{cancel、isCancelled、isDone、get}
		
		FutureTask类，实现Runnable接口和Future接口。此类包装Callable或Runnable对象，既可以在 Thread 中使用，又可以在 ExecutorService （线程池接口）中使用。
			是一种可以取消的异步的计算任务，它的计算是通过 Callable 实现的，
			它等价于可以携带结果的 Runnable，并且有三个状态：等待、运行和完成。
			完成包括所有计算以任意的方式结束，包括正常结束、取消和异常。
			
	
	多线程：
		优点：
			适当的提高程序的执行效率（多个线程同时执行）。
			适当的提高了资源利用率（CPU、内存等）。
		缺点：
			占用一定的内存空间。
			线程越多CPU的调度开销越大。
			程序的复杂度会上升。
			
		synchronized关键字：所有加上 synchronized 的方法和块语句，在多线程访问的时候，同一时刻只能有一个线程能够访问。
		volatile关键字：成员变量修饰符，保证下一个读取操作会在前一个写操作之后发生。
			线程都会直接从内存中读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。
		ThreadLocal变量
		join方法：Thread 类中，让调用该方法的 Thread 完成 run() 方法里面的东西后，再执行 join() 方法后面的代码
		yield方法：将当前运行线程的CPU控制权让出来，但有可能马上被系统的调度机制选中来运行。
		sleep方法：将当前运行线程的CPU控制权让出来，在指定的睡眠时间内一定不会再得到运行机会，直到它的睡眠时间完成。
		
		wait：导致线程进入等待状态，直到它被其他线程通过notify()或者notifyAll唤醒，该方法只能在同步方法中调用。
		notify：随机选择一个在该对象上调用wait方法的线程，解除其阻塞状态，该方法只能在同步方法或同步块内部调用。
		notifyAll：解除所有那些在该对象上调用wait方法的线程的阻塞状态，同样该方法只能在同步方法或同步块内部调用
		调用这三个方法中任意一个，当前线程必须是锁的持有者，如果不是会抛出一个 IllegalMonitorStateException 异常。
		
	线程池：
		避免线程的创建和销毁带来的性能开销。
		避免大量的线程间因互相抢占系统资源导致的阻塞现象。
		能够对线程进行简单的管理并提供定时执行、间隔执行等功能。
		
		Executor接口：线程池顶级接口，有execute方法
		ExecutorService：线程池应用接口，ExecutorService 的默认实现是 ThreadPoolExecutor
		ThreadPoolExecutor：ExecutorService 的默认实现
		Executors：线程池工厂类
			newCachedThreadPool ：可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。
				对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute() 将重用以前构造的线程（如果线程可用）。
				如果现有线程没有可用的，则创建一个新线程并添加到池中。
				终止并从缓存中移除那些已有 60 秒钟未被使用的线程。
				返回类型ExecutorService，实际类型ThreadPoolExecutor。
			newSingleThreadExecutor ： 创建是一个单线程池，也就是该线程池只有一个线程在工作，所有的任务是串行执行的。
				如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。
				返回类型ExecutorService。
			newFixedThreadPool：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。
				线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。
				返回类型ExecutorService。
			newScheduledThreadPool ：创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。
				返回类型ScheduledExecutorService。
		
TIPS：
	不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。每个线程都拥有单独的栈内存用来存储本地数据	
	
	Thread 类中的 start() 和 run() 方法有什么区别？	
		调用 start() 方法才会启动新线程；
		如果直接调用 Thread 的 run() 方法，它的行为就会和普通的方法一样；
		为了在新的线程中执行代码，必须使用 Thread.start() 方法。
		
	wait() 与 Thread.sleep(long time) 的区别？
		wait() 方法进入等待状态时会释放同步锁，而 sleep() 方法不会释放同步锁。
		
	什么是 Executor 框架？
		Executor框架在Java 5中被引入，Executor 框架是一个根据一组执行策略调用、调度、执行和控制的异步任务的框架。
		无限制的创建线程会引起应用程序内存溢出，所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。
		利用 Executor 框架可以非常方便的创建一个线程池。

	Executors 类是什么？
		Executors为Executor、ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 类提供了一些工具方法。
		Executors 可以用于方便的创建线程池。
		
	