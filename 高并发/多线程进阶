JDK1.5新增Callable 接口，方法call，任务执行后可返回值，也可以抛出异常。
	运行 Callable 任务可以拿到一个 Future 对象，表示异步计算的结果。
	它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。
	通过 Future 对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。
	可以在 ExecutorService 中使用。
	
Future接口，方法{cancel、isCancelled、isDone、get}

FutureTask类，实现Runnable接口和Future接口。此类包装Callable或Runnable对象，既可以在 Thread 中使用，又可以在 ExecutorService （线程池接口）中使用。
	是一种可以取消的异步的计算任务，它的计算是通过 Callable 实现的，
	它等价于可以携带结果的 Runnable，并且有三个状态：等待、运行和完成。
	完成包括所有计算以任意的方式结束，包括正常结束、取消和异常。
	
	
什么是 Executor 框架？
	Executor框架在Java 5中被引入，Executor 框架是一个根据一组执行策略调用、调度、执行和控制的异步任务的框架。
	无限制的创建线程会引起应用程序内存溢出，所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。
	利用 Executor 框架可以非常方便的创建一个线程池。

Executors 类是什么？
	Executors为Executor、ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 类提供了一些工具方法。
	Executors 可以用于方便的创建线程池。
	
IllegalThreadStateException异常表示同一线程调用了多次

线程间通信：
	 不同线程对同一资源进行操作
	 
线程组：
	ThreadGroup
	对一批线程进行分类管理，允许程序对线程组进行控制。线程默认属于main线程组
	
线程池：
	避免线程的创建和销毁带来的性能开销。
	避免大量的线程间因互相抢占系统资源导致的阻塞现象。
	能够对线程进行简单的管理并提供定时执行、间隔执行等功能。
	
	Executor接口：线程池顶级接口，有execute方法
	ExecutorService：线程池应用接口，ExecutorService 的默认实现是 ThreadPoolExecutor
	ThreadPoolExecutor：ExecutorService 的默认实现
	Executors：线程池工厂类
		newCachedThreadPool ：可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。
			对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute() 将重用以前构造的线程（如果线程可用）。
			如果现有线程没有可用的，则创建一个新线程并添加到池中。
			终止并从缓存中移除那些已有 60 秒钟未被使用的线程。
			返回类型ExecutorService，实际类型ThreadPoolExecutor。
		newSingleThreadExecutor ： 创建是一个单线程池，也就是该线程池只有一个线程在工作，所有的任务是串行执行的。
			如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。
			返回类型ExecutorService。
		newFixedThreadPool：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。
			线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。
			返回类型ExecutorService。
		newScheduledThreadPool ：创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。
			返回类型ScheduledExecutorService。
	
定时器：
	Timer：定时器
	TimerTask：任务
	
	开源调度框架Quartz
		
JDK1.5新增的Lock接口：
	ReentrantLock类
		lock方法：加锁
		unlock方法：解锁