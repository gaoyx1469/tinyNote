JDK1.5新增Callable 接口，方法call，任务执行后可返回值，也可以抛出异常。
	运行 Callable 任务可以拿到一个 Future 对象，表示异步计算的结果。
	它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。
	通过 Future 对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。
	可以在 ExecutorService 中使用。
	
Future接口，方法{cancel、isCancelled、isDone、get}

FutureTask类，实现Runnable接口和Future接口。此类包装Callable或Runnable对象，既可以在 Thread 中使用，又可以在 ExecutorService （线程池接口）中使用。
	是一种可以取消的异步的计算任务，它的计算是通过 Callable 实现的，
	它等价于可以携带结果的 Runnable，并且有三个状态：等待、运行和完成。
	完成包括所有计算以任意的方式结束，包括正常结束、取消和异常。
	
	
什么是 Executor 框架？
	Executor框架在Java 5中被引入，Executor 框架是一个根据一组执行策略调用、调度、执行和控制的异步任务的框架。
	无限制的创建线程会引起应用程序内存溢出，所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。
	利用 Executor 框架可以非常方便的创建一个线程池。

Executors 类是什么？
	Executors为Executor、ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 类提供了一些工具方法。
	Executors 可以用于方便的创建线程池。
	
IllegalThreadStateException异常表示同一线程调用了多次
	
定时器：
	Timer：定时器
	TimerTask：任务
	
	开源调度框架Quartz